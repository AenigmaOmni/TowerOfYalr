local FLOOR = 1
local WALL = 625
local TEST = 4
local BONES = 721
local TORCH = 725
local CANDLE = 726
local BONE2 = 722
local WEB = 723
local POT = 678
local STONE = 102
local STAIRS = 291

local max_iter = 500
local max_backup_iter = 500
local dungeon = {}
local start_x, start_y, dungeon_width, dungeon_height
local tile_size = 0
local level = 2
local num_rooms = level * 8
local rooms = 0
local size = 4
local spacer = 1
local doorways = {}
local object_count = num_rooms * 1.5

local function not_overlap(x, y, width, height)
	for k,v in ipairs(dungeon) do
		if v.x == x then
			if v.y == y then
				return false
			end
		end
	end
	return true
end

local function in_bounds(rx, ry, rw, rh)
	if rx > start_x then
		if rx < start_x + dungeon_width then
			if ry > start_y then
				if ry < start_y + dungeon_height then
					if rx + rw < start_x + dungeon_width then
						if ry + rh < start_y + dungeon_height then
							return true
						end
					end
				end
			end
		end
	end
	return false	
end

local function make_start_room(rx, ry, rw, rh)
	local done = false
	local room
	while not done do
		local x = rx + rw / 2
		local y = ry + rh / 2
		local width = size
		local height = size
		if in_bounds(x, y, width, height) then
			room = { x=x, y=y, w=width, h=height, connection=0}
			done = true
		end
	end
	rooms = rooms + 1
	return room
end

local function make_room(room)
	local done = false
	local r
	local c = 0
	while not done do
		c = c + 1
		local dir = math.random(1, 4)
		local x, y
		if dir == 1 then --up
			room.connection = 1
			x = math.floor(room.x)
			y = math.floor(room.y) + size + spacer * 2
		elseif dir == 2 then --down
			room.connection = 2
			x = math.floor(room.x)
			y = math.floor(room.y) - size - spacer * 2
		elseif dir == 3 then -- right
			room.connection = 3
			x = math.floor(room.x) + size + spacer * 2
			y = math.floor(room.y)
		elseif dir == 4 then --left
			room.connection = 4
			x = math.floor(room.x) - size - spacer * 2
			y = math.floor(room.y)
		end
		local width = size
		local height = size
		if in_bounds(x, y, width, height) then
			if not_overlap(x, y, width, height) then
				r = { x=x, y=y, w=width, h=height}
				done = true
			end
		end

		if c >= max_iter then
			print("Critical error: Reached max iter")
			print("Trying plan B")
			local c2 = 0
			while not done do
				c2 = c2 + 1
				local dir = math.random(1, 4)
				local x, y
				if dir == 1 then --up 2
					x = room.x
					y = room.y + size * 2 + spacer * 2
				elseif dir == 2 then --down 2
					x = room.x
					y = room.y - size * 2 - spacer * 2
				elseif dir == 3 then -- right 2
					x = room.x + size * 2 + spacer * 2
					y = room.y
				elseif dir == 4 then --left 2
					x = room.x - size * 2 - spacer * 2
					y = room.y
				end
				local width = size
				local height = size
				if in_bounds(x, y, width, height) then
					if not_overlap(x, y, width, height) then
						r = { x=x, y=y, w=width, h=height}
						print("Backup plan successful :)")
						done = true
					end
				end
				if done == false and c2 >= max_backup_iter then
					print("Backup plan failed, stopping generation. :(")
					rooms = num_rooms
					done = true
					break
				end
			end
		end
	end
	rooms = rooms + 1
	return r	
end

local function fill(rx, ry, rw, rh, tile)
	for x = rx, rx + rw, 1 do
		for y = ry, ry + rh, 1 do
			tilemap.set_tile("#tilemap_dungeon", "layer1", x, y, tile)
		end
	end
end

local function place_stairs_to_next_level()
	local len = table.getn(dungeon)
	local r = math.random(1, len)
	local room = dungeon[r]
	local x = room.x
	local y = room.y
	tilemap.set_tile("#tilemap_dungeon", "layer2", x + 1, y + 1, STAIRS)
end

local function make_dummy_rooms()
	for k,v in ipairs(dungeon) do
		local c = math.random(1, 4)
		if c == 1 then
			make_room(v)
		end
	end
end

local function carve_rooms()
	for k,v in ipairs(dungeon) do
		local x = math.floor(v.x)
		local y = math.floor(v.y)
		fill(x, y, v.w, v.h, FLOOR)
	end
end

local function carve_corridors()
	for k,v in ipairs(dungeon) do
		local x = v.x + 1
		local y = v.y
		--check top of room
		y = v.y + v.h + 2
		local t = tilemap.get_tile("#tilemap_dungeon", "layer1", x, y)
		if t == FLOOR then
			tilemap.set_tile("#tilemap_dungeon", "layer1", x, y-1, FLOOR)
			table.insert(doorways, {x=x, y=y-1})
		end

		--check bottom of room
		y = v.y - 2
		t = tilemap.get_tile("#tilemap_dungeon", "layer1", x, y)
		if t == FLOOR then
			tilemap.set_tile("#tilemap_dungeon", "layer1", x, y-1, FLOOR)
			table.insert(doorways, {x=x, y=y-1})
		end

		--check left side of room
		y = v.y + 1
		x = v.x - 2
		t = tilemap.get_tile("#tilemap_dungeon", "layer1", x, y)
		if t == FLOOR then
			x = v.x - 1
			tilemap.set_tile("#tilemap_dungeon", "layer1", x, y, FLOOR)
			table.insert(doorways, {x=x, y=y})
		end

		--check right side of room
		y = v.y + 1
		x = v.x + v.w + 2
		t = tilemap.get_tile("#tilemap_dungeon", "layer1", x, y)
		if t == FLOOR then
			x = x - 1
			tilemap.set_tile("#tilemap_dungeon", "layer1", x, y, FLOOR)
			table.insert(doorways, {x=x, y=y})
		end
		
	end
end

local function place_random_objects()
	local count = 0
	while count < object_count do
		local found = false
		local x = start_x
		local y = start_y
		local w = dungeon_width
		local h = dungeon_height
		local px 
		local py
		
		while not found do
			px = math.random(x, x + w)
			py = math.random(y, y + h)
			local tile = tilemap.get_tile("#tilemap_dungeon", "layer1", px, py)
			if tile == FLOOR then
				found = true
			end			
		end
		
		local c = math.random(1, 6)
		local t = 1
		if c == 1 then
			t = BONES
		elseif c == 3 then
			t = TORCH
		elseif c == 2 then
			t = BONE2
		elseif c == 4 then
			t = WEB
		elseif c == 5 then
			t = POT 
		elseif c == 6 then
			t = STONE
		end

		tilemap.set_tile("#tilemap_dungeon", "layer2", px, py, t)
		count = count + 1
	end
end

local function remove_objects_in_way()
	for k,v in ipairs(doorways) do
		-- clear doorway
		local x = v.x
		local y = v.y
		local tile = tilemap.get_tile("#tilemap_dungeon", "layer2", x, y)
		if tile ~= FLOOR then
			if tile == BONE2 or tile == BONES or tile == CANDLE or tile == TORCH or tile == STONE or tile == POT
			or tile == WEB then
				tilemap.set_tile("#tilemap_dungeon", "layer2", x, y, FLOOR)
			end
		end
		-- clear left spot
		x = v.x - 1
		y = y
		tile = tilemap.get_tile("#tilemap_dungeon", "layer2", x, y)
		if tile ~= FLOOR then
			if tile == BONE2 or tile == BONES or tile == CANDLE or tile == TORCH or tile == STONE or tile == POT
			or tile == WEB then
				tilemap.set_tile("#tilemap_dungeon", "layer2", x, y, FLOOR)
			end
		end
		-- clear right spot
		x = v.x + 1
		y = y
		tile = tilemap.get_tile("#tilemap_dungeon", "layer2", x, y)
		if tile ~= FLOOR then
			if tile == BONE2 or tile == BONES or tile == CANDLE or tile == TORCH or tile == STONE or tile == POT
			or tile == WEB then
				tilemap.set_tile("#tilemap_dungeon", "layer2", x, y, FLOOR)
			end
		end
		-- clear top spot
		x = v.x
		y = v.y + 1
		tile = tilemap.get_tile("#tilemap_dungeon", "layer2", x, y)
		if tile ~= FLOOR then
			if tile == BONE2 or tile == BONES or tile == CANDLE or tile == TORCH or tile == STONE or tile == POT
			or tile == WEB then
				tilemap.set_tile("#tilemap_dungeon", "layer2", x, y, FLOOR)
			end
		end
		-- clear bottom spot
		x = v.x
		y = v.y - 1
		tile = tilemap.get_tile("#tilemap_dungeon", "layer2", x, y)
		if tile ~= FLOOR then
			if tile == BONE2 or tile == BONES or tile == CANDLE or tile == TORCH or tile == STONE or tile == POT
			or tile == WEB then
				tilemap.set_tile("#tilemap_dungeon", "layer2", x, y, FLOOR)
			end
		end
	end
end

local function generate(r)
	local s_room = make_start_room(start_x, start_y, dungeon_width, dungeon_height)
	table.insert(dungeon, s_room)

	local r = make_room(s_room)
	table.insert(dungeon, r)

	while rooms < num_rooms do
		table.insert(dungeon, make_room(dungeon[rooms]))
	end
	
	make_dummy_rooms()
	
	--Fill the dungoen with walls
	fill(start_x, start_y, dungeon_width, dungeon_height, WALL)

	--Carve rooms
	carve_rooms()

	place_stairs_to_next_level()
	
	--carve corridors
	carve_corridors()

	--place objects
	place_random_objects()

	remove_objects_in_way()
end

function init(self)
	math.randomseed(os.time())
	math.random()
	math.random()
	math.random()
	math.random()
	math.random()
	math.random()
	start_x ,start_y, dungeon_width, dungeon_height = tilemap.get_bounds("#tilemap_dungeon")
	local tile_size = go.get("object_globals#script_globals", "tilemap_size")
	generate()

	local sx = dungeon[1].x
	local sy = dungeon[1].y
	msg.post("object_controller_game#script_controller_game", "gen_complete", { x=sx, y=sy})
end